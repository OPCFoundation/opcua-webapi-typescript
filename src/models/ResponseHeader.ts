/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtensionObject } from './ExtensionObject';
import {
    ExtensionObjectFromJSON,
    ExtensionObjectFromJSONTyped,
    ExtensionObjectToJSON,
    ExtensionObjectToJSONTyped,
} from './ExtensionObject';
import type { DiagnosticInfo } from './DiagnosticInfo';
import {
    DiagnosticInfoFromJSON,
    DiagnosticInfoFromJSONTyped,
    DiagnosticInfoToJSON,
    DiagnosticInfoToJSONTyped,
} from './DiagnosticInfo';
import type { StatusCode } from './StatusCode';
import {
    StatusCodeFromJSON,
    StatusCodeFromJSONTyped,
    StatusCodeToJSON,
    StatusCodeToJSONTyped,
} from './StatusCode';

/**
 * [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.33).
 * @export
 * @interface ResponseHeader
 */
export interface ResponseHeader {
    /**
     * 
     * @type {Date}
     * @memberof ResponseHeader
     */
    Timestamp?: Date;
    /**
     * 
     * @type {number}
     * @memberof ResponseHeader
     */
    RequestHandle?: number;
    /**
     * 
     * @type {StatusCode}
     * @memberof ResponseHeader
     */
    ServiceResult?: StatusCode;
    /**
     * 
     * @type {DiagnosticInfo}
     * @memberof ResponseHeader
     */
    ServiceDiagnostics?: DiagnosticInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseHeader
     */
    StringTable?: Array<string>;
    /**
     * 
     * @type {ExtensionObject}
     * @memberof ResponseHeader
     */
    AdditionalHeader?: ExtensionObject;
}

/**
 * Check if a given object implements the ResponseHeader interface.
 */
export function instanceOfResponseHeader(value: object): value is ResponseHeader {
    return true;
}

export function ResponseHeaderFromJSON(json: any): ResponseHeader {
    return ResponseHeaderFromJSONTyped(json, false);
}

export function ResponseHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseHeader {
    if (json == null) {
        return json;
    }
    return {
        
        'Timestamp': json['Timestamp'] == null ? undefined : (new Date(json['Timestamp'])),
        'RequestHandle': json['RequestHandle'] == null ? undefined : json['RequestHandle'],
        'ServiceResult': json['ServiceResult'] == null ? undefined : StatusCodeFromJSON(json['ServiceResult']),
        'ServiceDiagnostics': json['ServiceDiagnostics'] == null ? undefined : DiagnosticInfoFromJSON(json['ServiceDiagnostics']),
        'StringTable': json['StringTable'] == null ? undefined : json['StringTable'],
        'AdditionalHeader': json['AdditionalHeader'] == null ? undefined : ExtensionObjectFromJSON(json['AdditionalHeader']),
    };
}

export function ResponseHeaderToJSON(json: any): ResponseHeader {
    return ResponseHeaderToJSONTyped(json, false);
}

export function ResponseHeaderToJSONTyped(value?: ResponseHeader | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Timestamp': value['Timestamp'] == null ? undefined : ((value['Timestamp']).toISOString()),
        'RequestHandle': value['RequestHandle'],
        'ServiceResult': StatusCodeToJSON(value['ServiceResult']),
        'ServiceDiagnostics': DiagnosticInfoToJSON(value['ServiceDiagnostics']),
        'StringTable': value['StringTable'],
        'AdditionalHeader': ExtensionObjectToJSON(value['AdditionalHeader']),
    };
}

