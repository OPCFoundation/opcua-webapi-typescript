/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SignatureData } from './SignatureData';
import {
    SignatureDataFromJSON,
    SignatureDataFromJSONTyped,
    SignatureDataToJSON,
    SignatureDataToJSONTyped,
} from './SignatureData';
import type { ExtensionObject } from './ExtensionObject';
import {
    ExtensionObjectFromJSON,
    ExtensionObjectFromJSONTyped,
    ExtensionObjectToJSON,
    ExtensionObjectToJSONTyped,
} from './ExtensionObject';
import type { RequestHeader } from './RequestHeader';
import {
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
    RequestHeaderToJSONTyped,
} from './RequestHeader';
import type { SignedSoftwareCertificate } from './SignedSoftwareCertificate';
import {
    SignedSoftwareCertificateFromJSON,
    SignedSoftwareCertificateFromJSONTyped,
    SignedSoftwareCertificateToJSON,
    SignedSoftwareCertificateToJSONTyped,
} from './SignedSoftwareCertificate';

/**
 * [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2).
 * @export
 * @interface ActivateSessionRequest
 */
export interface ActivateSessionRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof ActivateSessionRequest
     */
    RequestHeader?: RequestHeader;
    /**
     * 
     * @type {SignatureData}
     * @memberof ActivateSessionRequest
     */
    ClientSignature?: SignatureData;
    /**
     * 
     * @type {Array<SignedSoftwareCertificate>}
     * @memberof ActivateSessionRequest
     */
    ClientSoftwareCertificates?: Array<SignedSoftwareCertificate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActivateSessionRequest
     */
    LocaleIds?: Array<string>;
    /**
     * 
     * @type {ExtensionObject}
     * @memberof ActivateSessionRequest
     */
    UserIdentityToken?: ExtensionObject;
    /**
     * 
     * @type {SignatureData}
     * @memberof ActivateSessionRequest
     */
    UserTokenSignature?: SignatureData;
}

/**
 * Check if a given object implements the ActivateSessionRequest interface.
 */
export function instanceOfActivateSessionRequest(value: object): value is ActivateSessionRequest {
    return true;
}

export function ActivateSessionRequestFromJSON(json: any): ActivateSessionRequest {
    return ActivateSessionRequestFromJSONTyped(json, false);
}

export function ActivateSessionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivateSessionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'RequestHeader': json['RequestHeader'] == null ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'ClientSignature': json['ClientSignature'] == null ? undefined : SignatureDataFromJSON(json['ClientSignature']),
        'ClientSoftwareCertificates': json['ClientSoftwareCertificates'] == null ? undefined : ((json['ClientSoftwareCertificates'] as Array<any>).map(SignedSoftwareCertificateFromJSON)),
        'LocaleIds': json['LocaleIds'] == null ? undefined : json['LocaleIds'],
        'UserIdentityToken': json['UserIdentityToken'] == null ? undefined : ExtensionObjectFromJSON(json['UserIdentityToken']),
        'UserTokenSignature': json['UserTokenSignature'] == null ? undefined : SignatureDataFromJSON(json['UserTokenSignature']),
    };
}

export function ActivateSessionRequestToJSON(json: any): ActivateSessionRequest {
    return ActivateSessionRequestToJSONTyped(json, false);
}

export function ActivateSessionRequestToJSONTyped(value?: ActivateSessionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'RequestHeader': RequestHeaderToJSON(value['RequestHeader']),
        'ClientSignature': SignatureDataToJSON(value['ClientSignature']),
        'ClientSoftwareCertificates': value['ClientSoftwareCertificates'] == null ? undefined : ((value['ClientSoftwareCertificates'] as Array<any>).map(SignedSoftwareCertificateToJSON)),
        'LocaleIds': value['LocaleIds'],
        'UserIdentityToken': ExtensionObjectToJSON(value['UserIdentityToken']),
        'UserTokenSignature': SignatureDataToJSON(value['UserTokenSignature']),
    };
}

