/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StatusCode } from './StatusCode';
import {
    StatusCodeFromJSON,
    StatusCodeFromJSONTyped,
    StatusCodeToJSON,
    StatusCodeToJSONTyped,
} from './StatusCode';

/**
 * [Link to specification](https://reference.opcfoundation.org/Core/Part6/v105/docs/5.4.2.18).
 * @export
 * @interface DataValue
 */
export interface DataValue {
    /**
     * 
     * @type {number}
     * @memberof DataValue
     */
    UaType?: number;
    /**
     * 
     * @type {any}
     * @memberof DataValue
     */
    Value?: any | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof DataValue
     */
    Dimensions?: Array<number>;
    /**
     * 
     * @type {StatusCode}
     * @memberof DataValue
     */
    StatusCode?: StatusCode;
    /**
     * 
     * @type {Date}
     * @memberof DataValue
     */
    SourceTimestamp?: Date;
    /**
     * 
     * @type {number}
     * @memberof DataValue
     */
    SourcePicoseconds?: number;
    /**
     * 
     * @type {Date}
     * @memberof DataValue
     */
    ServerTimestamp?: Date;
    /**
     * 
     * @type {number}
     * @memberof DataValue
     */
    ServerPicoseconds?: number;
}

/**
 * Check if a given object implements the DataValue interface.
 */
export function instanceOfDataValue(value: object): value is DataValue {
    return true;
}

export function DataValueFromJSON(json: any): DataValue {
    return DataValueFromJSONTyped(json, false);
}

export function DataValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataValue {
    if (json == null) {
        return json;
    }
    return {
        
        'UaType': json['UaType'] == null ? undefined : json['UaType'],
        'Value': json['Value'] == null ? undefined : json['Value'],
        'Dimensions': json['Dimensions'] == null ? undefined : json['Dimensions'],
        'StatusCode': json['StatusCode'] == null ? undefined : StatusCodeFromJSON(json['StatusCode']),
        'SourceTimestamp': json['SourceTimestamp'] == null ? undefined : (new Date(json['SourceTimestamp'])),
        'SourcePicoseconds': json['SourcePicoseconds'] == null ? undefined : json['SourcePicoseconds'],
        'ServerTimestamp': json['ServerTimestamp'] == null ? undefined : (new Date(json['ServerTimestamp'])),
        'ServerPicoseconds': json['ServerPicoseconds'] == null ? undefined : json['ServerPicoseconds'],
    };
}

export function DataValueToJSON(json: any): DataValue {
    return DataValueToJSONTyped(json, false);
}

export function DataValueToJSONTyped(value?: DataValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'UaType': value['UaType'],
        'Value': value['Value'],
        'Dimensions': value['Dimensions'],
        'StatusCode': StatusCodeToJSON(value['StatusCode']),
        'SourceTimestamp': value['SourceTimestamp'] == null ? undefined : ((value['SourceTimestamp']).toISOString()),
        'SourcePicoseconds': value['SourcePicoseconds'],
        'ServerTimestamp': value['ServerTimestamp'] == null ? undefined : ((value['ServerTimestamp']).toISOString()),
        'ServerPicoseconds': value['ServerPicoseconds'],
    };
}

