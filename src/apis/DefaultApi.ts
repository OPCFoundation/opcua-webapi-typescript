/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivateSessionRequest,
  ActivateSessionResponse,
  BrowseNextRequest,
  BrowseNextResponse,
  BrowseRequest,
  BrowseResponse,
  CallRequest,
  CallResponse,
  CancelRequest,
  CancelResponse,
  CloseSessionRequest,
  CloseSessionResponse,
  CreateMonitoredItemsRequest,
  CreateMonitoredItemsResponse,
  CreateSessionRequest,
  CreateSessionResponse,
  CreateSubscriptionRequest,
  CreateSubscriptionResponse,
  DeleteMonitoredItemsRequest,
  DeleteMonitoredItemsResponse,
  DeleteSubscriptionsRequest,
  DeleteSubscriptionsResponse,
  FindServersRequest,
  FindServersResponse,
  GetEndpointsRequest,
  GetEndpointsResponse,
  HistoryReadRequest,
  HistoryReadResponse,
  HistoryUpdateRequest,
  HistoryUpdateResponse,
  ModifyMonitoredItemsRequest,
  ModifyMonitoredItemsResponse,
  ModifySubscriptionRequest,
  ModifySubscriptionResponse,
  PublishRequest,
  PublishResponse,
  ReadRequest,
  ReadResponse,
  RegisterNodesRequest,
  RegisterNodesResponse,
  RepublishRequest,
  RepublishResponse,
  SetMonitoringModeRequest,
  SetMonitoringModeResponse,
  SetPublishingModeRequest,
  SetPublishingModeResponse,
  SetTriggeringRequest,
  SetTriggeringResponse,
  TransferSubscriptionsRequest,
  TransferSubscriptionsResponse,
  TranslateBrowsePathsToNodeIdsRequest,
  TranslateBrowsePathsToNodeIdsResponse,
  UnregisterNodesRequest,
  UnregisterNodesResponse,
  WriteRequest,
  WriteResponse,
} from '../models/index';
import {
    ActivateSessionRequestFromJSON,
    ActivateSessionRequestToJSON,
    ActivateSessionResponseFromJSON,
    ActivateSessionResponseToJSON,
    BrowseNextRequestFromJSON,
    BrowseNextRequestToJSON,
    BrowseNextResponseFromJSON,
    BrowseNextResponseToJSON,
    BrowseRequestFromJSON,
    BrowseRequestToJSON,
    BrowseResponseFromJSON,
    BrowseResponseToJSON,
    CallRequestFromJSON,
    CallRequestToJSON,
    CallResponseFromJSON,
    CallResponseToJSON,
    CancelRequestFromJSON,
    CancelRequestToJSON,
    CancelResponseFromJSON,
    CancelResponseToJSON,
    CloseSessionRequestFromJSON,
    CloseSessionRequestToJSON,
    CloseSessionResponseFromJSON,
    CloseSessionResponseToJSON,
    CreateMonitoredItemsRequestFromJSON,
    CreateMonitoredItemsRequestToJSON,
    CreateMonitoredItemsResponseFromJSON,
    CreateMonitoredItemsResponseToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    CreateSessionResponseFromJSON,
    CreateSessionResponseToJSON,
    CreateSubscriptionRequestFromJSON,
    CreateSubscriptionRequestToJSON,
    CreateSubscriptionResponseFromJSON,
    CreateSubscriptionResponseToJSON,
    DeleteMonitoredItemsRequestFromJSON,
    DeleteMonitoredItemsRequestToJSON,
    DeleteMonitoredItemsResponseFromJSON,
    DeleteMonitoredItemsResponseToJSON,
    DeleteSubscriptionsRequestFromJSON,
    DeleteSubscriptionsRequestToJSON,
    DeleteSubscriptionsResponseFromJSON,
    DeleteSubscriptionsResponseToJSON,
    FindServersRequestFromJSON,
    FindServersRequestToJSON,
    FindServersResponseFromJSON,
    FindServersResponseToJSON,
    GetEndpointsRequestFromJSON,
    GetEndpointsRequestToJSON,
    GetEndpointsResponseFromJSON,
    GetEndpointsResponseToJSON,
    HistoryReadRequestFromJSON,
    HistoryReadRequestToJSON,
    HistoryReadResponseFromJSON,
    HistoryReadResponseToJSON,
    HistoryUpdateRequestFromJSON,
    HistoryUpdateRequestToJSON,
    HistoryUpdateResponseFromJSON,
    HistoryUpdateResponseToJSON,
    ModifyMonitoredItemsRequestFromJSON,
    ModifyMonitoredItemsRequestToJSON,
    ModifyMonitoredItemsResponseFromJSON,
    ModifyMonitoredItemsResponseToJSON,
    ModifySubscriptionRequestFromJSON,
    ModifySubscriptionRequestToJSON,
    ModifySubscriptionResponseFromJSON,
    ModifySubscriptionResponseToJSON,
    PublishRequestFromJSON,
    PublishRequestToJSON,
    PublishResponseFromJSON,
    PublishResponseToJSON,
    ReadRequestFromJSON,
    ReadRequestToJSON,
    ReadResponseFromJSON,
    ReadResponseToJSON,
    RegisterNodesRequestFromJSON,
    RegisterNodesRequestToJSON,
    RegisterNodesResponseFromJSON,
    RegisterNodesResponseToJSON,
    RepublishRequestFromJSON,
    RepublishRequestToJSON,
    RepublishResponseFromJSON,
    RepublishResponseToJSON,
    SetMonitoringModeRequestFromJSON,
    SetMonitoringModeRequestToJSON,
    SetMonitoringModeResponseFromJSON,
    SetMonitoringModeResponseToJSON,
    SetPublishingModeRequestFromJSON,
    SetPublishingModeRequestToJSON,
    SetPublishingModeResponseFromJSON,
    SetPublishingModeResponseToJSON,
    SetTriggeringRequestFromJSON,
    SetTriggeringRequestToJSON,
    SetTriggeringResponseFromJSON,
    SetTriggeringResponseToJSON,
    TransferSubscriptionsRequestFromJSON,
    TransferSubscriptionsRequestToJSON,
    TransferSubscriptionsResponseFromJSON,
    TransferSubscriptionsResponseToJSON,
    TranslateBrowsePathsToNodeIdsRequestFromJSON,
    TranslateBrowsePathsToNodeIdsRequestToJSON,
    TranslateBrowsePathsToNodeIdsResponseFromJSON,
    TranslateBrowsePathsToNodeIdsResponseToJSON,
    UnregisterNodesRequestFromJSON,
    UnregisterNodesRequestToJSON,
    UnregisterNodesResponseFromJSON,
    UnregisterNodesResponseToJSON,
    WriteRequestFromJSON,
    WriteRequestToJSON,
    WriteResponseFromJSON,
    WriteResponseToJSON,
} from '../models/index';

export interface ActivateSessionOperationRequest {
    activateSessionRequest?: ActivateSessionRequest;
}

export interface BrowseOperationRequest {
    browseRequest?: BrowseRequest;
}

export interface BrowseNextOperationRequest {
    browseNextRequest?: BrowseNextRequest;
}

export interface CallOperationRequest {
    callRequest?: CallRequest;
}

export interface CancelOperationRequest {
    cancelRequest?: CancelRequest;
}

export interface CloseSessionOperationRequest {
    closeSessionRequest?: CloseSessionRequest;
}

export interface CreateMonitoredItemsOperationRequest {
    createMonitoredItemsRequest?: CreateMonitoredItemsRequest;
}

export interface CreateSessionOperationRequest {
    createSessionRequest?: CreateSessionRequest;
}

export interface CreateSubscriptionOperationRequest {
    createSubscriptionRequest?: CreateSubscriptionRequest;
}

export interface DeleteMonitoredItemsOperationRequest {
    deleteMonitoredItemsRequest?: DeleteMonitoredItemsRequest;
}

export interface DeleteSubscriptionsOperationRequest {
    deleteSubscriptionsRequest?: DeleteSubscriptionsRequest;
}

export interface FindServersOperationRequest {
    findServersRequest?: FindServersRequest;
}

export interface GetEndpointsOperationRequest {
    getEndpointsRequest?: GetEndpointsRequest;
}

export interface HistoryReadOperationRequest {
    historyReadRequest?: HistoryReadRequest;
}

export interface HistoryUpdateOperationRequest {
    historyUpdateRequest?: HistoryUpdateRequest;
}

export interface ModifyMonitoredItemsOperationRequest {
    modifyMonitoredItemsRequest?: ModifyMonitoredItemsRequest;
}

export interface ModifySubscriptionOperationRequest {
    modifySubscriptionRequest?: ModifySubscriptionRequest;
}

export interface PublishOperationRequest {
    publishRequest?: PublishRequest;
}

export interface ReadOperationRequest {
    readRequest?: ReadRequest;
}

export interface RegisterNodesOperationRequest {
    registerNodesRequest?: RegisterNodesRequest;
}

export interface RepublishOperationRequest {
    republishRequest?: RepublishRequest;
}

export interface SetMonitoringModeOperationRequest {
    setMonitoringModeRequest?: SetMonitoringModeRequest;
}

export interface SetPublishingModeOperationRequest {
    setPublishingModeRequest?: SetPublishingModeRequest;
}

export interface SetTriggeringOperationRequest {
    setTriggeringRequest?: SetTriggeringRequest;
}

export interface TransferSubscriptionsOperationRequest {
    transferSubscriptionsRequest?: TransferSubscriptionsRequest;
}

export interface TranslateBrowsePathsToNodeIdsOperationRequest {
    translateBrowsePathsToNodeIdsRequest?: TranslateBrowsePathsToNodeIdsRequest;
}

export interface UnregisterNodesOperationRequest {
    unregisterNodesRequest?: UnregisterNodesRequest;
}

export interface WriteOperationRequest {
    writeRequest?: WriteRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async activateSessionRaw(requestParameters: ActivateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivateSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/activatesession`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivateSessionRequestToJSON(requestParameters['activateSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivateSessionResponseFromJSON(jsonValue));
    }

    /**
     */
    async activateSession(requestParameters: ActivateSessionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivateSessionResponse> {
        const response = await this.activateSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async browseRaw(requestParameters: BrowseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/browse`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseRequestToJSON(requestParameters['browseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseResponseFromJSON(jsonValue));
    }

    /**
     */
    async browse(requestParameters: BrowseOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseResponse> {
        const response = await this.browseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async browseNextRaw(requestParameters: BrowseNextOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseNextResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/browsenext`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseNextRequestToJSON(requestParameters['browseNextRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseNextResponseFromJSON(jsonValue));
    }

    /**
     */
    async browseNext(requestParameters: BrowseNextOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseNextResponse> {
        const response = await this.browseNextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async callRaw(requestParameters: CallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/call`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallRequestToJSON(requestParameters['callRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallResponseFromJSON(jsonValue));
    }

    /**
     */
    async call(requestParameters: CallOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallResponse> {
        const response = await this.callRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cancelRaw(requestParameters: CancelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/cancel`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelRequestToJSON(requestParameters['cancelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelResponseFromJSON(jsonValue));
    }

    /**
     */
    async cancel(requestParameters: CancelOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelResponse> {
        const response = await this.cancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async closeSessionRaw(requestParameters: CloseSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloseSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/closesession`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloseSessionRequestToJSON(requestParameters['closeSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloseSessionResponseFromJSON(jsonValue));
    }

    /**
     */
    async closeSession(requestParameters: CloseSessionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloseSessionResponse> {
        const response = await this.closeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createMonitoredItemsRaw(requestParameters: CreateMonitoredItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMonitoredItemsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/createmonitoreditems`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonitoredItemsRequestToJSON(requestParameters['createMonitoredItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMonitoredItemsResponseFromJSON(jsonValue));
    }

    /**
     */
    async createMonitoredItems(requestParameters: CreateMonitoredItemsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMonitoredItemsResponse> {
        const response = await this.createMonitoredItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/createsession`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionRequestToJSON(requestParameters['createSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSessionResponseFromJSON(jsonValue));
    }

    /**
     */
    async createSession(requestParameters: CreateSessionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSessionResponse> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/createsubscription`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionRequestToJSON(requestParameters['createSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async createSubscription(requestParameters: CreateSubscriptionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionResponse> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteMonitoredItemsRaw(requestParameters: DeleteMonitoredItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMonitoredItemsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/deletemonitoreditems`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteMonitoredItemsRequestToJSON(requestParameters['deleteMonitoredItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMonitoredItemsResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteMonitoredItems(requestParameters: DeleteMonitoredItemsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMonitoredItemsResponse> {
        const response = await this.deleteMonitoredItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSubscriptionsRaw(requestParameters: DeleteSubscriptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSubscriptionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/deletesubscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSubscriptionsRequestToJSON(requestParameters['deleteSubscriptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteSubscriptions(requestParameters: DeleteSubscriptionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSubscriptionsResponse> {
        const response = await this.deleteSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findServersRaw(requestParameters: FindServersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindServersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/findservers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindServersRequestToJSON(requestParameters['findServersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindServersResponseFromJSON(jsonValue));
    }

    /**
     */
    async findServers(requestParameters: FindServersOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindServersResponse> {
        const response = await this.findServersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEndpointsRaw(requestParameters: GetEndpointsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEndpointsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/getendpoints`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetEndpointsRequestToJSON(requestParameters['getEndpointsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEndpointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getEndpoints(requestParameters: GetEndpointsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEndpointsResponse> {
        const response = await this.getEndpointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async historyReadRaw(requestParameters: HistoryReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryReadResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/historyread`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryReadRequestToJSON(requestParameters['historyReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoryReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async historyRead(requestParameters: HistoryReadOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryReadResponse> {
        const response = await this.historyReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async historyUpdateRaw(requestParameters: HistoryUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryUpdateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/historyupdate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryUpdateRequestToJSON(requestParameters['historyUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoryUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async historyUpdate(requestParameters: HistoryUpdateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryUpdateResponse> {
        const response = await this.historyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifyMonitoredItemsRaw(requestParameters: ModifyMonitoredItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifyMonitoredItemsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/modifymonitoreditems`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMonitoredItemsRequestToJSON(requestParameters['modifyMonitoredItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifyMonitoredItemsResponseFromJSON(jsonValue));
    }

    /**
     */
    async modifyMonitoredItems(requestParameters: ModifyMonitoredItemsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifyMonitoredItemsResponse> {
        const response = await this.modifyMonitoredItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifySubscriptionRaw(requestParameters: ModifySubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifySubscriptionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/modifysubscription`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModifySubscriptionRequestToJSON(requestParameters['modifySubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifySubscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async modifySubscription(requestParameters: ModifySubscriptionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifySubscriptionResponse> {
        const response = await this.modifySubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async publishRaw(requestParameters: PublishOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishRequestToJSON(requestParameters['publishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishResponseFromJSON(jsonValue));
    }

    /**
     */
    async publish(requestParameters: PublishOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishResponse> {
        const response = await this.publishRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readRaw(requestParameters: ReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/read`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadRequestToJSON(requestParameters['readRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async read(requestParameters: ReadOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadResponse> {
        const response = await this.readRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerNodesRaw(requestParameters: RegisterNodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterNodesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/registernodes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterNodesRequestToJSON(requestParameters['registerNodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterNodesResponseFromJSON(jsonValue));
    }

    /**
     */
    async registerNodes(requestParameters: RegisterNodesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterNodesResponse> {
        const response = await this.registerNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async republishRaw(requestParameters: RepublishOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepublishResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/republish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepublishRequestToJSON(requestParameters['republishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepublishResponseFromJSON(jsonValue));
    }

    /**
     */
    async republish(requestParameters: RepublishOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepublishResponse> {
        const response = await this.republishRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setMonitoringModeRaw(requestParameters: SetMonitoringModeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetMonitoringModeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/setmonitoringmode`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetMonitoringModeRequestToJSON(requestParameters['setMonitoringModeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetMonitoringModeResponseFromJSON(jsonValue));
    }

    /**
     */
    async setMonitoringMode(requestParameters: SetMonitoringModeOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetMonitoringModeResponse> {
        const response = await this.setMonitoringModeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setPublishingModeRaw(requestParameters: SetPublishingModeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetPublishingModeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/setpublishingmode`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPublishingModeRequestToJSON(requestParameters['setPublishingModeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetPublishingModeResponseFromJSON(jsonValue));
    }

    /**
     */
    async setPublishingMode(requestParameters: SetPublishingModeOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetPublishingModeResponse> {
        const response = await this.setPublishingModeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setTriggeringRaw(requestParameters: SetTriggeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetTriggeringResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/settriggering`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetTriggeringRequestToJSON(requestParameters['setTriggeringRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetTriggeringResponseFromJSON(jsonValue));
    }

    /**
     */
    async setTriggering(requestParameters: SetTriggeringOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetTriggeringResponse> {
        const response = await this.setTriggeringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async transferSubscriptionsRaw(requestParameters: TransferSubscriptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferSubscriptionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/transfersubscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferSubscriptionsRequestToJSON(requestParameters['transferSubscriptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async transferSubscriptions(requestParameters: TransferSubscriptionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferSubscriptionsResponse> {
        const response = await this.transferSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async translateBrowsePathsToNodeIdsRaw(requestParameters: TranslateBrowsePathsToNodeIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslateBrowsePathsToNodeIdsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/translate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslateBrowsePathsToNodeIdsRequestToJSON(requestParameters['translateBrowsePathsToNodeIdsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslateBrowsePathsToNodeIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async translateBrowsePathsToNodeIds(requestParameters: TranslateBrowsePathsToNodeIdsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslateBrowsePathsToNodeIdsResponse> {
        const response = await this.translateBrowsePathsToNodeIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unregisterNodesRaw(requestParameters: UnregisterNodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnregisterNodesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/unregisternodes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnregisterNodesRequestToJSON(requestParameters['unregisterNodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnregisterNodesResponseFromJSON(jsonValue));
    }

    /**
     */
    async unregisterNodes(requestParameters: UnregisterNodesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnregisterNodesResponse> {
        const response = await this.unregisterNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async writeRaw(requestParameters: WriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WriteResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/write`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteRequestToJSON(requestParameters['writeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WriteResponseFromJSON(jsonValue));
    }

    /**
     */
    async write(requestParameters: WriteOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WriteResponse> {
        const response = await this.writeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
